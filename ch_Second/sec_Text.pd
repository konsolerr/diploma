Web
-----------

Начальная схема устройства любого веб-сервиса достаточно примитивна и приведена на \inlref{рисунке}{img:scheme1}рис. 2: пользователь делает запрос, а сервер возвращает ему ответ.

\image{scheme1}{Схема базового веб-сервиса}

В разделе 2.1 была показана необходимость использовать R и Bioconductor в качестве инструментов для анализа генетической экспрессии. В связи с этим перед нами встаёт несколько опций:

1. Написать всю серверную часть на R. 
2. Написать серверную часть на отличном от R языке, и использовать R, только как язык для анализа данных.

Первую опцию тоже можно рассмотреть с двух сторон:
 * Написать свой web-framewrok на языке R с функциональностью, достаточной для совершения всех нужных нам операций.
 * Использовать готовый web-framework на R, и попытаться добиться от него нужной функциональности.

Первый из этих пунктов - крайне сложен в реализации, ведь количество нужного от фреймворка функционала достаточно велико, а сам по себе язык недостаточно богат на наработки в области web-разработки.

Второй пункт стоит рассмотреть чуть подробнее. На данный момент существует один фреймворк, который покрыл хотя бы часть, требуемого от него функционала: ShinyR [3]. Но и ShinyR не оправдал наших ожиданий, так как он был спроектирован, как инструмент для одностраничных приложений, чаще всего с одной функциональностью, и от этого сложно масштабируем. Так же в нем нет поддержки сессий\пользователей (которые нужны для того, чтобы хранить исследования пользователей на сервере).

Поэтому решено было не использовать язык R для серверных целей. Но тогда встаёт вопрос, как установить связь между основным веб-сервером и RBlock.

\image{scheme2}{Вопрос взаимодействия основного веб-сервера и RBlock}
