### Использование фреймворка Django ###
Для основного веб-сервера, обрабатывающего клиентские запросы будем использовать django-framework. Django-framework является универсальным инструментом для backend веб-разработки.

Можно было бы попробовать построить весь сервис на связке OpenCPU + frontend (html + javascript), но есть ряд вопросов, которые нельзя решить только этими средствами:

 1. Ограничение доступа к серверу OpenCPU.
 2. Хранение информации о сессиях с привязкой к пользователям.

OpenCPU -- проект, основная задача которого RPC. Если разместить сервер публично, то любой человек, узнавший его адрес, мог проводить на нем ресурсоемкие вычисления. Мы же заинтересованы только в вычислениях, которые делает пользователь нашего сервиса. Поэтому хочется изолировать наш сервер OpenCPU от внешнего вмешательства.

Необходимо запоминать OpenCPU cессии и привязывать их к пользователям сервиса, для того, чтобы посетители могли не терять свои исследования после того, как вышли из сервиса или просто закрыли браузер.

Таким образом, Django-приложение будет служить нескольким основным целям:

 1. Работа с OpenCPU API.
 2. Работа с пользователями и хранение текущей сессии.
 3. Работа с сессиями OpenCPU (привязка ключей сессии к пользователям).
 4. Любая другая функциональность сервиса кроме функциональности для анализа данных.


