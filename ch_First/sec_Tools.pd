Инструменты, которые могут быть использованы.
----------
### Язык R и Bioconductor ###
Как уже было упомянуто в обзоре существующих решений и подходов, R и Bioconductor -- хорошие инструменты в области анализа экспрессии генов и могут быть использованы в работе как инструменты для совершения анализа.

### Фреймворк Shiny ###
Фреймворк Shiny -- веб-фреймворк языка R, для создания веб-приложений, позволяющих проводить анализ в интернете \cite{ShinyR}. Отличительной чертой фреймворка является простота использования, не требующая от разработчика пишущего анализ на языке R знаний о веб-разработке. Shiny является хорошим фреймворком для одностраничных приложений со статичной структурой страницы.

### OpenCPU ###
\label{content:opencpu}

HTTP (HyperText Transfer Protocol) -- протокол прикладного уровня передачи данных, использует модель "клиент-сервер", здесь и далее под HTTP будет подразумеваться протокол версии HTTP/1.1 \cite{HTTP}

HTTP API -- интерфейс прикладного программирование, набор процедур и функций которые может нам предоставить сервис/программа. В данном случае вызов процедур и возвращение результата выполняется посредством протокола HTTP.

RPC (Remote Procedure Call) -- технология, позволяющая программе выполнять вызов функций или процедур на удалённой машине.

Веб-сервер -- программа, обрабатывающая запросы HTTP для распространения информации в интернете.

OpenCPU -- это серверное решение предоставляющее RPC посредством HTTP API для вызова функций и получение объектов языка R \cite{opencpu}.

В этом разделе мы рассмотрим наиболее важные части API, которые предоставляет OpenCPU. Входной точкой является адрес “/ocpu/”. OpenCPU поддерживает два основных HTTP-метода GET и POST. В зависимости от того, на что указывает ссылка (на файл или на объект языка R) метод GET совершает чтение файла или объекта, а метод POST выполняет скрипт внутри файла или выполняет метод, описываемый объектом языка R. Примеры работы с API можно рассмотрены на таблице \ref{table:apiopencpu}.

\begin{table}[ht]
\small
\centering
\caption{Основные части API OpenCPU}
\begin{tabular}{| p{1cm} | p{2cm} | p{2.5cm} | p{2.5cm} | p{6cm} |}
\hline
Метод & На что указывает ссылка & Действие & Аргументы & Пример \\ \hline
GET & Файл & Прочитать файл & - & GET /ocpu/library/MASS/NEWS  \\ \hline
GET & Объект R & Прочитать объект & Формат для представления объекта & GET /ocpu/library/MASS/R/cats/json \\ \hline
POST & Файл & Выполнить скрипт & Аргументы запуска скрипта & POST /ocpu/library/MASS/scripts/ch01.R \\ \hline
POST & Объект R & Выполнить функцию & Аргументы функции & POST /ocpu/library/stats/R/rnorm \\ \hline
\end{tabular}
\label{table:apiopencpu}
\end{table}


В понимании API объект R может быть, как объектом языка R, так и функцией.

Также, важной частью API являются сессии. Каждый раз, когда OpenCPU вызывает функцию или запускает скрипт, OpenCPU создает для этого отдельную сессию. В этой сессии лежат все сгенерированные файлы, результат выполнения функции (скрипта), графики, а также вывод консоли. Каждая сессия обладает уникальным ключом (далее ключ сессии). Одно из важнейших свойств ключа сессии заключается в том, что его можно передать в качестве аргумента API для вызова функции, и тогда вместо аргумента функции R будет использован результат выполнения сессии, пример рассмотрен на листинге 1.1.
\begin{code}[title=Листинг 1.1 -- Пример передачи ключа сессии в качестве аргумента API]
	POST /ocpu/library/stats/R/rnorm n=15
	POST /ocpu/library/base/R/mean x=x01d3f004fc
\end{code}

OpenCPU также предоставляет API, для работы с сессией, наиболее важные пункты представлены в таблице \ref{table:apisession}.

\begin{table}[ht]
\small
\centering
\caption{Основные части API OpenCPU для работы с сессией}
\begin{tabular}{| l | l |}
\hline
    Адрес & Действие/Содержимое \\ \hline
    /ocpu/tmp/{key}/ & Перечисляет данные всей сессии \\ \hline
    /ocpu/tmp/{key}/R & Содержит данные о всех объектах сессии \\ \hline
    /ocpu/tmp/{key}/R/.val & Объект R - результат выполнения функции или скрипта \\ \hline
    /ocpu/tmp/{key}/files/* & Содержит все файлы в сессии \\ \hline
    /ocpu/tmp/{key}/graphics/ & Содержит все графики сессии \\ \hline
    /ocpu/tmp/{key}/source & Содержит выполненный код сессии \\ \hline
    /ocpu/tmp/{key}/stdout & Содержит стандартный вывод функции/скрипта \\ \hline
\end{tabular}
\label{table:apisession}
\end{table}

### Фреймворк Django ###
Фреймворк Django -- высокоуровневый веб-фреймворк c открытым исходным кодом для написания динамических веб-приложений, написан на языке Python \cite{Django}. Фреймворк Django может использоваться в качестве основного веб-фреймворка в работе. Отличительные положительные качества Django:

1. Высокая скорость разработки, которая достигается засчет большой библиотеки языка и хорошего проектирования самого фреймворка.
2. Фреймворк поддерживает последние разработки в области веб и защищен от уже известных веб-уязвимостей.

### Веб-сервер Nginx ###
Веб-сервер Nginx -- простой, низкоуровневый HTTP-сервер. Основным предзназначением Nginx является работа со статическими страницами или использование в качестве прокси-сервера перед динамическими сайтами. Отличительными чертами Nginx являются скорость работы, распределение нагрузки и отказоустойчивость.

### HTML ###
HyperText Markup Language -- (далее просто HTML), язык разметки для создания веб-страниц. Язык HTML является де-факто стандартом веб-разработки для разметки веб-страниц. Здесь и далее под HTML мы понимаем стандарт HMTL5 \cite{HTML5}.

### JavaScript ###
JavaScript -- прототипно-ориентированный скриптовый язык программирования. Используется в браузерах для выполнения скриптов для придания интерактивности веб-страницами.

AngularJS -- JavaScript-фреймворк с открытым исходным кодом \cite{angularjs} для разработки браузерных приложений и клиентской логики. Примечательной особенностью данного фреймворка является двустороннее связывание данных, что означает, что состояние модели и представления идентичны.



